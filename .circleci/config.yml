version: 2.1

orbs:
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2

# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  lint-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.8 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout

      # Cache can be tricky at first, but this means
      # Please, restore my cache (what is actually on the cache will be defined later)
      # if the text key `deps-{{ checksum "poetry.lock" }}` changes (and it WILL change everytime poetry.lock is updated since we rely on its checksum)
      # and poetry.lock is updated every time we add a new dependency to our project
      - restore_cache:
          keys:
            - deps-{{ checksum "poetry.lock" }}
      - run:
          name: Install Dependencies
          command: |
            poetry install

      # Save's the specified path as a cache. This is the path Poetry uses to install the dependencies
      # So if you don't install anything new, this folder won't change and the cache will be effective
      - save_cache:
          key: deps-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

      - run:
          name: Check schema
          command: |
            poetry run schema --diff

      - run:
          name: Run mypy
          command: |
            poetry run mypy --install-types --non-interactive

      - run:
          name: Run flake8
          command: |
            poetry run flake8

      - run:
          name: Run black
          command: |
            poetry run black --diff --check chairmanmao server

  deployment:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker Login
          command: |
            docker login -u $CONTAINER_REGISTRY_USERNAME -p $CONTAINER_REGISTRY_PASSWORD $CONTAINER_REGISTRY

      - run:
          name: Docker Build Server
          command: |
            docker build \
                -t $CONTAINER_REGISTRY/chairmanmao-server:$CIRCLE_SHA1 \
                -t $CONTAINER_REGISTRY/chairmanmao-server:latest \
                -f Dockerfile.chairmanmao-server \
                .

      - run:
          name: Docker Build Bot
          command: |
            docker build \
                -t $CONTAINER_REGISTRY/chairmanmao-bot:$CIRCLE_SHA1 \
                -t $CONTAINER_REGISTRY/chairmanmao-bot:latest \
                -f Dockerfile.chairmanmao-bot \
                .

      - run:
          name: Docker Push
          command: |
            docker push $CONTAINER_REGISTRY/chairmanmao-bot:$CIRCLE_SHA1
            docker push $CONTAINER_REGISTRY/chairmanmao-server:$CIRCLE_SHA1
            docker push $CONTAINER_REGISTRY/chairmanmao-bot:latest
            docker push $CONTAINER_REGISTRY/chairmanmao-server:latest

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  flow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - lint-and-test:
          context: DailyMandarinThread
      - deployment:
          context: DailyMandarinThread
          requires:
            - lint-and-test
